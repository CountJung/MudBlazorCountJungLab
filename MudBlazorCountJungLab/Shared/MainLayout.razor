@using MudBlazorCountJungLab.Context;
@using MudBlazorCountJungLab.Provider;
@using Microsoft.AspNetCore.Components.Authorization;

@implements IDisposable
@inherits LayoutComponentBase
@*@inject NavigationManager NaviManager*@
@inject IJSRuntime JSService
@inject GoogleAuthenticationStateProvider googleAuthStatProvider

<MudThemeProvider @bind-IsDarkMode="@isDarkMode" @ref="@mudThemeProvider" Theme="mudTheme" DefaultScrollbar=true />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0" Color="Color.Tertiary" >
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle(e))" />
        <MudToggleIconButton @bind-Toggled="@isDarkMode" Icon="@Icons.Material.Filled.LightMode" ToggledIcon="@Icons.Material.Filled.DarkMode" Color="Color.Primary" ToggledColor="Color.Secondary" Title="LightMode" ToggledTitle="DarkMode" />
        <MudSpacer />
        @*  <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Href="https://mudblazor.com/" Target="_blank" />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/MudBlazor/MudBlazor/" Target="_blank" /> *@
        @* <div id="google-login-button" /> *@
        <MudButton Class="ma-4" Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.Login" OnClick="@(()=>SignInGoogleAsync())">Log-In</MudButton>
        <MudButton Class="ma-4" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Logout" OnClick="@(()=>LogOutClick())">Log-Out</MudButton>
        <MudAvatar Class="ma-4" Color="Color.Warning">
            @globalSet?.User
            <MudImage Src="@globalSet?.Profile"/>
        </MudAvatar>
    </MudAppBar>
    <MudDrawer @bind-Open="drawerOpen" Anchor="Anchor.Start" ClipMode="DrawerClipMode.Always" Elevation="1" Variant="DrawerVariant.Responsive">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">MudBlazorCountJungLab</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private MudTheme mudTheme = new();

    private bool drawerOpen = false;
    private bool isDarkMode = false;
    private MudThemeProvider? mudThemeProvider;
    [Inject] GlobalContext? globalSet { get; set; }
    [Parameter] public DateTime StartTime { get; set; }
    // string? User { get; set; } = "😃";
    // private string? profile { get; set; } = "";
    private IJSObjectReference? jsModule;
    private Timer? refreshTimer;

    // protected override void OnInitialized()
    // {
    //     base.OnInitialized();
    //     mudTheme.LayoutProperties.DrawerWidthLeft = "300px";
    // }

    protected override /* async */ Task OnInitializedAsync()
    {
        // await InvokeAsync(() =>
        // {
        //     mudTheme.LayoutProperties.DrawerWidthLeft = "300px";
        //     refreshTimer = new Timer(async (_) => { await RefershPage(); }, null, 0, 1000);
        // });
        mudTheme.LayoutProperties.DrawerWidthLeft = "300px";
        refreshTimer = new Timer(async (_) => { await RefershPage(); }, null, 0, 1000);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        //never reach here in logic
        refreshTimer?.Dispose();
    }

    private /* async */ Task RefershPage()
    {
        globalSet!.User = googleAuthStatProvider?.CurrentUser?.FamilyName;
        globalSet.Profile = googleAuthStatProvider?.CurrentUser?.Picture;
        // await InvokeAsync(() =>
        // {
        //     StateHasChanged();
        // });
        StateHasChanged();
        return Task.CompletedTask;
        // return Task.FromResult(0);
    }

    private async Task LoadJSModule()
    {
        //https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-javascript-from-dotnet?view=aspnetcore-7.0#javascript-isolation-in-javascript-modules
        jsModule = await JSService.InvokeAsync<IJSObjectReference>("import", "./js/googleOAuth.js");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isDarkMode = await mudThemeProvider?.GetSystemPreference()!;
            //await mudThemeProvider?.WatchSystemPreference(SystemPreferenceChanged);
            StateHasChanged();
            //google oauth
            await LoadJSModule();
            // var googlelAuthenticationStateProvider = DotNetObjectReference.Create<GoogleAuthenticationStateProvider>(googleAuthStatProvider);
            // await jsModule!.InvokeVoidAsync("GoogleAuthInitialize", "546541242863-l1t6pcb89jriohp94r13noboakimu007.apps.googleusercontent.com", googlelAuthenticationStateProvider);
            // var element = await JSService.InvokeAsync<IJSObjectReference>("document.getElementById", "google-login-button");
            // await JSService.InvokeVoidAsync("google.accounts.id.renderButton", element, new { theme = "filled_blue", size = "large" });
        }

        globalSet!.DarkMode = isDarkMode;
        // profile = googleAuthStatProvider?.CurrentUser?.Picture;
        // User = googleAuthStatProvider?.CurrentUser?.FamilyName;
        //if (Pages.Index.Instance is not null)
        //{
        //    Pages.Index.Instance.DarkMode = isDarkMode;
        //}
        //NaviManager.NavigateTo($"/?DarkMode={isDarkMode}");
    }

    private async Task SignInGoogleAsync()
    {
        var googlelAuthenticationStateProvider = DotNetObjectReference.Create<GoogleAuthenticationStateProvider>(googleAuthStatProvider);
        await jsModule!.InvokeVoidAsync("GoogleAuthInitialize", "546541242863-l1t6pcb89jriohp94r13noboakimu007.apps.googleusercontent.com", googlelAuthenticationStateProvider);
        await jsModule!.InvokeVoidAsync("blazorSchoolGooglePrompt");
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet(); //nothing
        if (StartTime == default)
            StartTime = DateTime.Now;
        StateHasChanged();
    }

    private async Task SystemPreferenceChanged(bool change)
    {
        isDarkMode = change;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private void DrawerToggle(MouseEventArgs eventArgs)
    {
        drawerOpen = !drawerOpen;
    }

    private void LogOutClick()
    {
        googleAuthStatProvider.Logout();
        googleAuthStatProvider.CurrentUser = new();
        // globalVariable!.User = googleAuthStatProvider?.CurrentUser?.FamilyName;
        // globalVariable!.Profile = googleAuthStatProvider?.CurrentUser?.Picture;
    }

    private void ChangeTheme()
    {
         mudTheme = new MudTheme()
            {
                Palette = new Palette()
                {
                    Primary = Colors.Blue.Default,
                    Secondary = Colors.Green.Accent4,
                    AppbarBackground = Colors.Red.Default,
                },
                PaletteDark = new PaletteDark()
                {
                    Primary = Colors.Blue.Lighten1
                },

                LayoutProperties = new LayoutProperties()
                {
                    DrawerWidthLeft = "260px",
                    DrawerWidthRight = "300px"
                }
            };
    }
}