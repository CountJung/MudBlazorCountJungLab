@using MudBlazorCountJungLab.Context;
@inherits LayoutComponentBase
@*@inject NavigationManager NaviManager*@

<MudThemeProvider @bind-IsDarkMode="@isDarkMode" @ref="@mudThemeProvider" Theme="mudTheme" DefaultScrollbar=true />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0" Color="Color.Tertiary" >
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle(e))" />
        <MudSpacer />
        @*<MudSwitch @bind-Checked="@isDarkMode" Color="Color.Inherit" T="bool" Class="ma-8" Label="Toggle Light/Dark Mode" />*@
        <MudToggleIconButton @bind-Toggled="@isDarkMode" Icon="@Icons.Material.Filled.LightMode" ToggledIcon="@Icons.Material.Filled.DarkMode" Color="Color.Primary" ToggledColor="Color.Secondary" Title="LightMode" ToggledTitle="DarkMode" />
        <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Href="https://mudblazor.com/" Target="_blank" />
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/MudBlazor/MudBlazor/" Target="_blank" />
        <MudAvatar Color="Color.Warning">@User</MudAvatar>
    </MudAppBar>
    <MudDrawer @bind-Open="drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">MudBlazorCountJungLab</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16 pt-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private MudTheme mudTheme = new();
    MudTheme MyCustomTheme = new MudTheme()
        {
            Palette = new Palette()
            {
                Primary = Colors.Blue.Default,
                Secondary = Colors.Green.Accent4,
                AppbarBackground = Colors.Red.Default,
            },
            PaletteDark = new PaletteDark()
            {
                Primary = Colors.Blue.Lighten1
            },

            LayoutProperties = new LayoutProperties()
            {
                DrawerWidthLeft = "260px",
                DrawerWidthRight = "300px"
            }
        };
    private bool drawerOpen = false;
    private bool isDarkMode = false;
    private MudThemeProvider? mudThemeProvider;
    [Inject] GlobalClass? globalVariable { get; set; }
    [Parameter] public DateTime StartTime { get; set; }
    string? User { get; set; } = "사";

    protected override async Task OnInitializedAsync()
    {
        //avoid warning
        await Task.CompletedTask;
        mudTheme.LayoutProperties.DrawerWidthLeft = "300px";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isDarkMode = await mudThemeProvider?.GetSystemPreference()!;
            //await mudThemeProvider?.WatchSystemPreference(SystemPreferenceChanged);
            StateHasChanged();
        }
        else
        {
        }
        //if(GlobalVariable.Instance != null)
        {
            //GlobalVariable.Instance!.DarkMode = isDarkMode;
            globalVariable!.DarkMode = isDarkMode;
        }
        //if (Pages.Index.Instance is not null)
        //{
        //    Pages.Index.Instance.DarkMode = isDarkMode;
        //}
        //NaviManager.NavigateTo($"/?DarkMode={isDarkMode}");
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet(); //nothing
        if (StartTime == default)
            StartTime = DateTime.Now;
    }

    private async Task SystemPreferenceChanged(bool change)
    {
        isDarkMode = change;
        StateHasChanged();
        await Task.CompletedTask;
    }

    private void DrawerToggle(MouseEventArgs eventArgs)
    {
        drawerOpen = !drawerOpen;
    }
}