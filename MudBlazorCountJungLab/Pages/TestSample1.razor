@page "/TestSample1"
@using System.Threading
@using Microsoft.Extensions.Logging
@implements IDisposable
@inject ILogger<TestSample1> Logger
@using System.IO
@using MudBlazorCountJungLab.Interfaces;
@inject IJSRuntime JS
@inject NavigationManager navManager
@inject HttpClient HttpC

<PageTitle>TestSample1</PageTitle>

<ErrorBoundary @ref="errorBoundary">
    <ChildContent>
        <MudText Typo="Typo.h1" GutterBottom="true">Logger, Download Test</MudText>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="LongRunningWork">Working?</MudButton>
        <MudButton Color="Color.Secondary" Variant="Variant.Filled" @onclick="Dispose">Disposing!</MudButton>
        <MudGrid>
            <MudItem xs="12" sm="6" md="4">
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@context">
                            Upload using FileValueChanged
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
                <MudFileUpload T="IBrowserFile" OnFilesChanged="UploadFiles">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@context">
                            Upload using OnFilesChanged
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                @if (files != null)
                {
                    <MudText Typo="@Typo.h6">@files.Count() File@(files.Count() == 1 ? "" : "s"):</MudText>
                    <MudList>
                        @foreach (var file in files)
                        {
                            <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
                                @file.Name <code>@file.Size bytes</code>
                            </MudListItem>
                        }
                    </MudList>
                }
            </MudItem>
        </MudGrid>
        <MudGrid Class="d-flex align-center justify-content-center ma-3">
            <MudItem xs="12" sm="6">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar Color="Color.Secondary">I</MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">Istra Croatia</MudText>
                            <MudText Typo="Typo.body2">Peninsula in Europe</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardMedia Image="@base64UploadData" />
                    <MudCardContent>
                        <MudText Typo="Typo.body2">This photo was taken in a small village in Istra Croatia.</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
                        <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" />
                    </MudCardActions>
                </MudCard>
                <MudText Typo="Typo.subtitle1" Align="Align.Center">[Card]</MudText>
            </MudItem>
            <MudItem xs="12" md="8" Class="d-flex justify-center align-center" Style="height:500px;">
                <MudImage ObjectFit="ImageFit" Height="@(SetHeight ? ImageHeight : null)" Width="@(SetWidth ? ImageWidth : null)" Src="@($"images/{ImagePath}")" Alt="Mony the dog" Elevation="25" Class="rounded-lg" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudPaper Class="pa-4 mt-6 mt-lg-16" Elevation="0">
                    <MudText Typo="Typo.h6">Options</MudText>
                    <MudSelect Label="Image" AnchorOrigin="Origin.BottomCenter" Dense="true" Margin="Margin.Dense" @bind-Value="ImagePath" Class="mt-4">
                        <MudSelectItem T="string" Value="@("1.jpeg")">Sky</MudSelectItem>
                        <MudSelectItem T="string" Value="@("2.jpeg")">Mountain</MudSelectItem>
                        <MudSelectItem T="string" Value="@("3.jpeg")">Maple</MudSelectItem>
                        <MudSelectItem T="string" Value="@("4.jpeg")">Velly</MudSelectItem>
                        <MudSelectItem T="string" Value="@("coffee_paperclips_pencil_angled_bw_w1080.jpg")">Coffee</MudSelectItem>
                        <MudSelectItem T="string" Value="@("iphone_cactus_tea_overhead_bw_w1080.jpg")">iPhone</MudSelectItem>
                        <MudSelectItem T="string" Value="@("joy_note_coffee_eyeglasses_overhead_bw_w1080.jpg")">Joy</MudSelectItem>
                        <MudSelectItem T="string" Value="@("mugs_side_bw_w1080.jpg")">Mugs</MudSelectItem>
                        <MudSelectItem T="string" Value="@("paper_flower_overhead_bw_w1080.jpg")">Paper</MudSelectItem>
                        <MudSelectItem T="string" Value="@("typewriter_overhead_bw_w1080.jpg")">Typewritter</MudSelectItem>
                    </MudSelect>
                    <MudSelect Label="Image Fit" AnchorOrigin="Origin.BottomCenter" Dense="true" Margin="Margin.Dense" @bind-Value="ImageFit" Class="mt-4">
                        <MudSelectItem T="ObjectFit" Value="ObjectFit.None">None</MudSelectItem>
                        <MudSelectItem T="ObjectFit" Value="ObjectFit.Cover">Cover</MudSelectItem>
                        <MudSelectItem T="ObjectFit" Value="ObjectFit.Contain">Contain</MudSelectItem>
                        <MudSelectItem T="ObjectFit" Value="ObjectFit.Fill">Fill</MudSelectItem>
                        <MudSelectItem T="ObjectFit" Value="ObjectFit.ScaleDown">ScaleDown</MudSelectItem>
                    </MudSelect>
                    <MudText>Width: @(SetWidth ? $"{ImageWidth}px" : "Auto")</MudText>
                        <MudSwitch @bind-Checked="@SetWidth" Color="Color.Primary" Class="mr-0" />
                        <MudSlider @bind-Value="@ImageWidth" Disabled="@(!SetWidth)" Max="400" Color="Color.Primary" />
                        <MudText>Height: @(SetHeight ? $"{ImageHeight}px" : "Auto")</MudText>
                        <MudSwitch @bind-Checked="@SetHeight" Color="Color.Secondary" Class="mr-0" />
                        <MudSlider @bind-Value="@ImageHeight" Disabled="@(!SetHeight)" Max="350" Color="Color.Secondary" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" md="4" Class="d-flex justify-center align-center">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary" @onclick=@( async () => await BlazorDownload!.DownloadFile("image.jpg", Base64ImageString!,"application/octet-stream"))
                               StartIcon="@Icons.Material.Filled.DownloadForOffline">
                        Download Image
                    </MudButton>
                </MudItem>
        </MudGrid>
    </ChildContent>
    <ErrorContent>
        <MudAppBar Bottom="true" Color="Color.Primary">
            <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Square="false" Class="my-2">
                <MudText Typo="@Typo.h5">Exception Error!</MudText>
            </MudAlert>
        </MudAppBar>
    </ErrorContent>
</ErrorBoundary>

    @code {
    private ErrorBoundary? errorBoundary;
    private Resource resource = new();
    private CancellationTokenSource cts = new();

    IList<IBrowserFile> files = new List<IBrowserFile>();
    private string? base64UploadData;
    [Inject] public IBlazorDownloadFileService? BlazorDownload { get; set; }
    public string? Base64ImageString { get; private set; }

    public bool SetHeight { get; set; } = false;
    public bool SetWidth { get; set; } = true;
    public int ImageHeight { get; set; } = 300;
    public int ImageWidth { get; set; } = 300;
    public ObjectFit ImageFit { get; set; } = ObjectFit.Cover;
    private string imagePath = "1.jpeg";
    public string ImagePath { get => imagePath; set { imagePath = value; UpdateTask(); } } 

    private void UploadFiles(IBrowserFile file)
    {
        UploadImageConvert(file);
        foreach(var browserfile in files)
        {
            if (browserfile.Name.Contains(file.Name))
                return;
        }
        files.Add(file);
        StateHasChanged();
        //TODO upload the files to the server
    }

    private void UploadFiles(InputFileChangeEventArgs args)
    {
        UploadImageConvert(args.File);
        foreach (var browserfile in files)
        {
            if (browserfile.Name.Contains(args.File.Name))
                return;
        }
        files.Add(args.File);
        StateHasChanged();
        //TODO upload the files to the server
    }

    private async void UploadImageConvert(IBrowserFile browserFile)
    {
        base64UploadData = await Task.Run(() => GetImageSourceFromBase64FilePath(browserFile));
        StateHasChanged();
    }

    private Stream GetFileStream()
    {
        var randomBinaryData = new byte[10 * 1024];
        var fileStream = new MemoryStream(randomBinaryData);

        return fileStream;
    }

    private async Task DownloadFileFromStream()
    {
        var fileStream = GetFileStream();
        var fileName = "Junk.bin";

        using var streamRef = new DotNetStreamReference(stream: fileStream);
        //Exception error
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);

        //navManager.NavigateTo("images/4.jpeg", true);
    }

    private async Task DownloadFileFromURL()
    {
        var fileName = "4.jpeg";
        var fileURL = "images/4.jpeg";
        //Exception ??
        await JS.InvokeVoidAsync("triggerFileDownload", fileName, fileURL);
    }

    protected override async Task OnInitializedAsync()
    {
        Base64ImageString = await GetBase64StringImage("images/4.jpeg");
        base64UploadData = "images/iphone_cactus_tea_overhead_bw_w1080.jpg";
    }

    private async void UpdateTask() => await UpdateBase64Image();
    private async Task UpdateBase64Image() => Base64ImageString = await GetBase64StringImage($"images/{ImagePath}");

    //server side
    private string ConvertFileToBase64(string path)
    {
        byte[] imageArray = System.IO.File.ReadAllBytes(path);
        string base64 = Convert.ToBase64String(imageArray);
        return base64;
    }
    //web assembly
    private async Task<string> GetBase64StringImage(string path)
    {
        byte[]? byteImageFile = await HttpC.GetByteArrayAsync(path);
        string base64String = Convert.ToBase64String(byteImageFile);
        return await Task.FromResult(base64String);
    }

    private async Task<string> GetImageSourceFromBase64FilePath(IBrowserFile file)
    {
        // using var imageInfo = System.Drawing.Image.FromStream(file.OpenReadStream());
        var resizedFile = await file.RequestImageFileAsync(file.ContentType, ImageHeight, ImageWidth);
        var buffer = new byte[resizedFile.Size];
        using var streamData = resizedFile.OpenReadStream();
        await streamData.ReadAsync(buffer);
        var imagesrc = Convert.ToBase64String(buffer);
        return await Task.FromResult( string.Format("data:image/png;base64,{0}", imagesrc));
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        errorBoundary?.Recover();
    }

    protected async Task LongRunningWork()
    {
        Logger.LogInformation("Long running work started");

        await Task.Delay(5000, cts.Token);

        cts.Token.ThrowIfCancellationRequested();
        resource.BackgroundResourceMethod(Logger);
    }

    public void Dispose()
    {
        try
        {
            Logger.LogInformation("Executing Dispose");
            cts.Cancel();
            cts.Dispose();
            resource?.Dispose();
        }
        catch(Exception ex)
        {
            Logger.LogError(ex.ToString());
        }
    }

    private class Resource : IDisposable
    {
        private bool disposed;

        public void BackgroundResourceMethod(ILogger<TestSample1> logger)
        {
            logger.LogInformation("BackgroundResourceMethod: Start method");

            if (disposed)
            {
                logger.LogInformation("BackgroundResourceMethod: Disposed");
                throw new ObjectDisposedException(nameof(Resource));
            }

            // Take action on the Resource

            logger.LogInformation("BackgroundResourceMethod: Action on Resource");
        }

        public void Dispose()
        {
            disposed = true;
        }
    }

}
