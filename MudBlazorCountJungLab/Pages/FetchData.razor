@page "/fetchdata"
@inject HttpClient Http
@using MudBlazorCountJungLab.Shared
@using MudBlazorCountJungLab.Services
@using Microsoft.AspNetCore.WebUtilities;
@inject NavigationManager NaviManager
<PageTitle>Weather forecast</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Weather forecast</MudText>
<MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>
@if (forecasts == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="forecasts" Hover="true" SortLabel="Sort By" Elevation="0">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<WeatherForecast, object>(x=>x.Date)">Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.TemperatureC)">Temp. (C)</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.TemperatureF)">Temp. (F)</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WeatherForecast, object>(x=>x.Summary!)">Summary</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context.Date</MudTd>
            <MudTd DataLabel="Temp. (C)">@context.TemperatureC</MudTd>
            <MudTd DataLabel="Temp. (F)">@context.TemperatureF</MudTd>
            <MudTd DataLabel="Summary">@context.Summary</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}


@code {
    private List<WeatherForecast>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts ??= await Http.GetFromJsonAsync<List<WeatherForecast>>("sample-data/weather.json");
        forecasts?.AddRange(WeatherforecastService.GetForecasts(DateTime.Now)!);

        //Uri uri = NaviManager.ToAbsoluteUri(NaviManager.Uri);
        //var queryStrings = QueryHelpers.ParseQuery(uri.Query);
        //if(queryStrings.Count>0)
        //{
        //    WeatherForecast weather = new()
        //        {
        //            Date = DateTime.Now
        //        };
        //    queryStrings.TryGetValue("weatherString", out var summary);
        //    weather.Summary = summary;
        //    queryStrings.TryGetValue("weatherTemperature", out var temperature);
        //    weather.TemperatureC = Convert.ToInt32(temperature);
        //    forecasts?.Add(weather);
        //}
        string summary = ExtractQueryStringByKey<string>(NaviManager, "weatherString");
        int temperatureC = ExtractQueryStringByKey<int>(NaviManager, "weatherTemperature");
        if(summary!=default && temperatureC!=default)
        {
            WeatherForecast weather = new()
                {
                    Summary = summary,
                    Date = DateTime.Now,
                    TemperatureC = temperatureC
                };
                forecasts?.Add(weather);
        }
    }

    private T ExtractQueryStringByKey<T>(NavigationManager navigationManager, string key)
    {
        T result = default!;
        Uri uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        QueryHelpers.ParseQuery(uri.Query).TryGetValue(key, out var queryValue);

        if (typeof(T).Equals(typeof(string)))
            result = (T)(object)queryValue.ToString();
        else if (typeof(T).Equals(typeof(int)))
            result = (T)(object)Convert.ToInt32(queryValue);
        else if (typeof(T).Equals(typeof(double)))
            result = (T)(object)Convert.ToDouble(queryValue);

        return result;
    }
}
