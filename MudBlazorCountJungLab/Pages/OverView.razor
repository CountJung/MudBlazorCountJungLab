@page "/OverView"

@using System.Globalization;
@using Microsoft.AspNetCore.WebUtilities;
@using MudBlazorCountJungLab.Context;
@using MudBlazorCountJungLab.Services;
@implements IDisposable
@*@implements IAsyncDisposable*@
@inject ISnackbar Snackbar
@inject NavigationManager NaviManager

@*The properties:

m - for classes that set margin
p - for classes that set padding
The direction property applies to:

t - for margin-top or padding-top
b - for margin-bottom or padding-bottom
l - for margin-left or padding-left
r - for margin-right or padding-right
s - for margin-left/padding-left (in LTR mode) and margin-right/padding-right (in RTL mode)
e - for margin-right/padding-right (in LTR mode) and margin-left/padding-left (in RTL mode)
x - for margin-left/padding-left and margin-right/padding-right
y - for margin-top/padding-top and margin-bottom/padding-bottom
a - for all 4 sides.*@

<PageTitle>OverView</PageTitle>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Style="height: 200px;">
                <MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="150px" ChartOptions="chartOptions"></MudChart>
                @*<MudButton @onclick="RandomizeLineWidths">Randomize Line Widths</MudButton>
                <MudText Typo="Typo.h6">Selected portion of the chart: @Index</MudText>*@
            </MudPaper>
            <MudText Typo="Typo.subtitle1" Align="Align.Center">[LineChart]</MudText>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                <MudTextField Label="en-US" Variant="Variant.Outlined" Culture="@en" @bind-Value="date" />
                <MudTextField Label="ko-KR" Variant="Variant.Outlined" Culture="@kr" @bind-Value="date" />
            </MudPaper>
            <MudText Typo="Typo.subtitle1" Align="Align.Center">[TextField]</MudText>
        </MudItem>
        <MudItem xs="12" sm="12" md="4">
            <MudPaper Elevation="2" Class="pa-4 overflow-auto" Style="height: 200px;">
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField Label="Current Theme" Variant="Variant.Outlined" Converter="@converter" @bind-Value="@DarkMode" Immediate="true" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.Edit" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudFab Color="Color.Warning" StartIcon="@Icons.Material.Filled.Cancel" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudProgressCircular Color="Color.Secondary" Value="@progressValue" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudProgressLinear Color="Color.Tertiary" Rounded="true" Striped="true" Value="@progressValue" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudProgressLinear Vertical="true" Color="Color.Dark" Striped="true" Size="Size.Large" Value="@progressValue" />
                    </MudItem>
                </MudGrid>
            </MudPaper>
            <MudText Typo="Typo.subtitle1" Align="Align.Center">[Grid]</MudText>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="height: 400px;">
                        <MudField Class="ma-4" Label="QueryTest" Variant="Variant.Outlined"></MudField>
                        <MudTextField Class="ma-4" @bind-Value="WeatherTemperatureC" Label="TemperatureC" Variant="Variant.Outlined"></MudTextField>
                        <MudTextField Class="ma-4" @bind-Value="WeatherSummaryString" Label="SummaryString" Variant="Variant.Outlined"></MudTextField>
                        <MudButton Class="ma-4" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="QueryNavigatePage">Send</MudButton>
                    </MudPaper>
                    <MudText Typo="Typo.subtitle1" Align="Align.Center">[QueryPage Sample]</MudText>
                </MudItem>
               <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="height: 100%;">
                        <MudText Typo="Typo.body1">
                            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
                            tempor incididunt ut labore et dolore magna aliqua. Rhoncus dolor purus non
                            enim praesent elementum facilisis leo vel. Risus at ultrices mi tempus
                            imperdiet. Semper risus in hendrerit gravida rutrum quisque non tellus.
                            Convallis convallis tellus id interdum velit laoreet id donec ultrices.
                            Odio morbi quis commodo odio aenean sed adipiscing. Amet nisl suscipit
                            adipiscing bibendum est ultricies integer quis. Cursus euismod quis viverra
                            nibh cras. Metus vulputate eu scelerisque felis imperdiet proin fermentum
                            leo. Mauris commodo quis imperdiet massa tincidunt. Cras tincidunt lobortis
                            feugiat vivamus at augue. At augue eget arcu dictum varius duis at
                            consectetur lorem. Velit sed ullamcorper morbi tincidunt. Lorem donec massa
                            sapien faucibus et molestie ac.
                        </MudText>
                    </MudPaper>
                    <MudText Typo="Typo.subtitle1" Align="Align.Center">[Typography]</MudText>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudPaper Elevation="2" Class="d-flex align-center justify-center mud-width-full py-8" Style="height: 100%">
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderAvatar>
                            <MudAvatar Color="Color.Secondary">I</MudAvatar>
                        </CardHeaderAvatar>
                        <CardHeaderContent>
                            <MudText Typo="Typo.body1">Istra Croatia</MudText>
                            <MudText Typo="Typo.body2">Peninsula in Europe</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
                        </CardHeaderActions>
                    </MudCardHeader>
                    <MudCardMedia Image="images/iphone_cactus_tea_overhead_bw_w1080.jpg" />
                    <MudCardContent>
                        <MudText Typo="Typo.body2">This photo was taken in a small village in Istra Croatia.</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
                        <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" />
                    </MudCardActions>
                </MudCard>
            </MudPaper>
            <MudText Typo="Typo.subtitle1" Align="Align.Center">[Card]</MudText>
        </MudItem>
        <MudItem xs="12" sm="12">
            <MudPaper Elevation="5" Class="d-flex align-center justify-center mud-width-full py-8" Style="height: 100%">
                <MudText Typo="Typo.body2">
                    Consequat mauris nunc congue nisi vitae suscipit. Fringilla est ullamcorper
                    eget nulla facilisi etiam dignissim diam. Pulvinar elementum integer enim
                    neque volutpat ac tincidunt. Ornare suspendisse sed nisi lacus sed viverra
                    tellus. Purus sit amet volutpat consequat mauris. Elementum eu facilisis
                    sed odio morbi. Euismod lacinia at quis risus sed vulputate odio. Morbi
                    tincidunt ornare massa eget egestas purus viverra accumsan in. In hendrerit
                    gravida rutrum quisque non tellus orci ac. Pellentesque nec nam aliquam sem
                    et tortor. Habitant morbi tristique senectus et. Adipiscing elit duis
                    tristique sollicitudin nibh sit. Ornare aenean euismod elementum nisi quis
                    eleifend. Commodo viverra maecenas accumsan lacus vel facilisis. Nulla
                    posuere sollicitudin aliquam ultrices sagittis orci a.
                </MudText>
            </MudPaper>
            <MudText Typo="Typo.subtitle2" Align="Align.Center">[Typography]</MudText>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="5" Class="pa-7 overflow-auto" Style="height: 300px;">
                <MudSwipeArea OnSwipe="@OnSwipe">
                    <MudDatePicker PickerVariant="PickerVariant.Static" Date="@(DateTime.Today.AddDays(1))" @bind-PickerMonth="@_pickerMonth" />
                </MudSwipeArea>
            </MudPaper>
            <MudText Typo="Typo.subtitle2" Align="Align.Center">[DatePicker]</MudText>
        </MudItem>
        <MudItem xs="12" sm="12" md="4">
            <MudPaper Elevation="5" Class="pa-7" Style="height: 300px;">
                <MudButton Color="Color.Success" @onclick="@(() =>{Snackbar.Configuration.PositionClass=Defaults.Classes.Position.BottomRight; Snackbar.Add("The reactor is running at optimum temperature", Severity.Success);} )">Success Snackbar</MudButton>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="OnButtonClickedMSGBox">I am Balrog</MudButton>
                <MudSpacer />
                <MudChip>@MSGString</MudChip>
            </MudPaper>
            <MudText Typo="Typo.subtitle2" Align="Align.Center">[Popups]</MudText>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    //public static Index? Instance;
    DateTime date = DateTime.Now;
    CultureInfo en = CultureInfo.GetCultureInfo("en-US");
    CultureInfo kr = CultureInfo.GetCultureInfo("ko-KR");
    [Inject] GlobalContext? globalVariable { get; set; }
    public bool DarkMode;
    private Timer? refreshTimer;
    public int WeatherTemperatureC { get; set; }
    public string? WeatherSummaryString { get; set; }
    Converter<bool> converter = new Converter<bool>
        {
            SetFunc = value => value ? "DarkMode" : "LightMode",
            GetFunc = text => (text ?? "").ToLowerInvariant() == "darkmode",
        };
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    public ChartOptions chartOptions = new ChartOptions() { LineStrokeWidth = 5 };
    public List<ChartSeries> Series = new List<ChartSeries>()
    {
        new ChartSeries() { Name = "Series 1", Data = new double[] { 90, 79, 72, 69, 62, 62, 55, 65, 70, 200} },
        new ChartSeries() { Name = "Series 2", Data = new double[] { 10, 41, 35, 51, 49, 62, 69, 91, 148, 200 } },
    };
    public string[] XAxisLabels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep" };
    Random random = new Random();
    private void RandomizeData()
    {
        var new_series = new List<ChartSeries>()
        {
            new ChartSeries() { Name = "Series 1", Data = new double[10] },
            new ChartSeries() { Name = "Series 2", Data = new double[10] },
        };
        for (int i = 0; i < 10; i++)
        {
            new_series[0].Data[i] = random.NextDouble() * 100;
            new_series[1].Data[i] = random.NextDouble() * 100;
        }
        Series = new_series;
        StateHasChanged();
    }
    int progressValue { get; set; }

    private void RandomizeLineWidths()
    {
        chartOptions.LineStrokeWidth = random.NextInt64(1, 5);
        StateHasChanged();
    }

    private void UpdateDatas()
    {
        //DarkMode = (bool)GlobalVariable.Instance?.DarkMode!;
        DarkMode = globalVariable!.DarkMode;
        RandomizeData();
        progressValue = progressValue < 100 ? progressValue + 5 : 0;
    }

    //protected override void OnInitialized()
    //{
    //    base.OnInitialized();
    //    Instance = this;
    //}

    private async Task RefreshPageTask()
    {
        await InvokeAsync(() =>
        {
            UpdateDatas();
            StateHasChanged();
        });
    }

    protected override async Task OnInitializedAsync()
    {
        //var uri = new Uri(NaviManager.Uri);
        //var queryParams = QueryHelpers.ParseQuery(uri.Query);
        //if (queryParams.ContainsKey("DarkMode"))
        //DarkMode = bool.Parse(queryParams["DarkMode"]!);
        //await Task.CompletedTask;

        //Instance = this;
        await base.OnInitializedAsync();
        refreshTimer = new Timer(async _ =>
        {
            await RefreshPageTask();
        }, null, 0, 1000);
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }

    //public async ValueTask DisposeAsync()
    //{
    //    //if (obj is not null)
    //    //{
    //    //    await obj.DisposeAsync();
    //    //}
    //}

    private void QueryNavigatePage(MouseEventArgs eventArgs)
    {
        Dictionary<string, string> queryParams = new Dictionary<string, string>
            {
                ["weatherString"] = WeatherSummaryString!,
                ["weatherTemperature"] = WeatherTemperatureC.ToString()
            };
        NaviManager.NavigateTo(QueryHelpers.AddQueryString("fetchdata", queryParams));
    }

    DateTime? _pickerMonth = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);

    public void OnSwipe(SwipeDirection direction)
    {
        if (direction == SwipeDirection.LeftToRight)
        {
            _pickerMonth = _pickerMonth!.Value.AddMonths(-1);
            StateHasChanged();
        }
        else if (direction == SwipeDirection.RightToLeft)
        {
            _pickerMonth = _pickerMonth!.Value.AddMonths(1);
            StateHasChanged();
        }
    }

    [Inject] private IDialogService? DialogService { get; set; }
    string MSGString = "Message box hasn't been opened yet";

    private async void OnButtonClickedMSGBox()
    {
        bool? result = await DialogService!.ShowMessageBox(
            "Secure The Ring",
            (MarkupString)$"You <br /> Shall <br /> not <br /> <b>Pass!<b/>",
            yesText: "Fire Whip!", cancelText: "Smash Ground");
        MSGString = result == null ? "Returned to Moria" : "Fighting With Gandalf!";
        StateHasChanged();
    }
}
