@using System.ComponentModel.DataAnnotations
@using MudBlazorCountJungLab.Context;
@using MudBlazorCountJungLab.ViewModels;
@inject GlobalContext GlobalFunc;


<EditForm Model="@ViewModel?.CurrentInstarPostItem" OnValidSubmit="SubmitPost" Context="UploadForm">
    <DataAnnotationsValidator />
    <MudGrid >
        <MudItem xs="12" sm="8" md="8">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Author" HelperText="Author Name" Class="mt-3" Variant="Variant.Outlined"
                    @bind-Value="ViewModel!.CurrentInstarPostItem!.Author" For="@(() => ViewModel!.CurrentInstarPostItem!.Author )" InputType="InputType.Text" />
                    <MudTextField Label="Title" HelperText="Title" Class="mt-3" Variant="Variant.Outlined"
                    @bind-Value="ViewModel!.CurrentInstarPostItem!.Title" For="@(() => ViewModel!.CurrentInstarPostItem!.Title)" InputType="InputType.Text" />
                    <MudTextField T="string" Label="Description" HelperText="@($"Max2000, Current={CurrentDescriptionLength}")" Variant="Variant.Outlined" Lines="10"
                    @bind-Value="ViewModel.CurrentInstarPostItem.Description" For="@(() => ViewModel.CurrentInstarPostItem.Description)" />

                    <MudTextField Label="Image File" HelperText="Select Image File" Class="mt-3"
                    @bind-Value="ImageFileName" For="@(() => ImageFileName)" InputType="InputType.Text" />

                    @* context parameter needed *@
                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                        <ButtonTemplate Context="context">
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload" for="@context">
                                Upload Image
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                </MudCardContent>

                <MudCardActions>
                    <MudText Typo="Typo.body1">Image Size Limit about below 4K</MudText>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

        @*Image layer*@
        <MudItem xs="12" sm="4" md="4">
            <MudImage Src="@ViewModel?.CurrentInstarPostItem?.Base64ImageData" ObjectFit="ObjectFit.Cover" Width="320" Height="240"/>
        </MudItem>

    </MudGrid>
</EditForm>

@code {
    [CascadingParameter(Name = "InstarViewModel")]
    InstarPostViewModel? ViewModel { get; set; }

    [Required]
    public string? ImageFileName { get; set; }
    public int CurrentDescriptionLength { get => ViewModel?.CurrentInstarPostItem?.Description?.Length ?? 0; }

    private void SubmitPost()
    {
        // success = true;
        // StateHasChanged();
        ViewModel?.SubmitPost();
        ViewModel!.CurrentInstarPostItem = new Models.InstarPostItem();
        ImageFileName = "";
        StateHasChanged();
    }

    private void UploadFiles(IBrowserFile file)
    {
        if (file.ContentType == "image/png" || file.ContentType == "image/jpeg")
        {
            ImageFileName = file.Name;
            UploadImageConvert(file);
        }
    }

    private async void UploadImageConvert(IBrowserFile browserFile)
    {
        ViewModel!.CurrentInstarPostItem!.Base64ImageData = await Task.Run(() => GlobalFunc.GetImageSourceFromBase64FilePath(browserFile));
        StateHasChanged();
    }

}
