@using MudBlazorCountJungLab.ViewModels;

<MudGrid>

    <MudItem xs="12">
        <MudGrid Justify="justification">
           
            @foreach(var PostItem in ViewModel!.InstarPostItems!.OrderBy(i=>i.RecordDateTime))
            {
                <MudItem xs="12" sm="4">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar Color="Color.Secondary">@PostItem?.Author</MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">Title</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Surface" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Surface" />
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardMedia Image="@PostItem?.Base64ImageData" />
                        <MudCardContent>
                            <MudText Typo="Typo.body2">@PostItem?.Description</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
                            <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter(Name = "InstarViewModel")]
    InstarPostViewModel? ViewModel { get; set; }

    int _papers = 7;
    int papers { get { return _papers; } set { UpdatePapers(value); } }

    int[] breaks = new int[7] { 3, 4, 2, 3, 3, 2, 4 };

    Justify justification = Justify.FlexStart;

    void UpdatePapers(int value)
    {

        int[] newbreaks = Enumerable.Repeat(3, value).ToArray();

        for (int i = 0; i < newbreaks.Length; i++)
        {
            if (i < breaks.Length)
            {
                newbreaks[i] = breaks[i];
            }
        }

        breaks = newbreaks;

        _papers = value;

        StateHasChanged();
    }

    void UpdateBreaks(int index, int changeamount)
    {
        List<int> newbreaks = breaks.ToList();
        if (newbreaks[index] + changeamount > 12 || newbreaks[index] + changeamount < 1) return; //don't go above 12 or below 1
        newbreaks[index] += changeamount;

        breaks = newbreaks.ToArray();

        StateHasChanged();
    }

}
