@using MudBlazorCountJungLab.Context;
@using MudBlazorCountJungLab.Interfaces;
@using MudBlazorCountJungLab.Models;
@using MudBlazorCountJungLab.ViewModels;

@inject IBlazorDownloadFileService BlazorDown;
@inject ILogger<InstarListComponent> Logconsole;
@inject GlobalContext GlobalSet

<MudGrid>
    <MudItem xs="12">
        <MudGrid Justify="Justify.FlexStart">
            @foreach(var PostItem in ViewModel!.InstarPostItems!.OrderBy(i=>i.RecordDateTime))
            {
                <MudItem xs="12" sm="4">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar Color="Color.Secondary">@PostItem?.Author?.First()
                                    <MudImage Src="@GlobalSet?.Profile"/>
                                </MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body1">@PostItem?.Title</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Surface" OnClick="@(()=>EditPost(PostItem))"/>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Surface" OnClick="@(()=>DeletePost(PostItem))"/>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardMedia Image="@PostItem?.Base64ImageData" />
                        <MudCardContent>
                            <MudText Typo="Typo.body2">@PostItem?.Description</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" OnClick="@(()=>FavoriteClick(PostItem!))"/>
                            <MudIconButton Icon="@Icons.Material.Filled.Download" Color="Color.Default" OnClick="@(async ()=>await DownLoadImage(PostItem!))" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    </MudItem>
</MudGrid>

@code {
    [CascadingParameter(Name = "InstarViewModel")]
    InstarPostViewModel? ViewModel { get; set; }

    void EditPost(InstarPostItem item)
    {
        ViewModel!.CurrentInstarPostItem = item;
    }
    void DeletePost(InstarPostItem item)
    {
        ViewModel?.InstarPostItems?.Remove(item);
    }
    void FavoriteClick(InstarPostItem item)
    {
        item.FavoriteCount += 1;
    }
    async Task DownLoadImage(InstarPostItem item)
    {
        try
        {
            string Base64Image = item.Base64ImageData!.Remove(0,22);
            await BlazorDown.DownloadFile($"{item.Author}_{item.RecordDateTime?.ToString("yyyy-MM-dd:HH:mm:ss")}.png", Base64Image, "application/octet-stream");
        }
        catch(Exception ex)
        {
            Logconsole.LogError(ex.ToString());
        }
    }
}
